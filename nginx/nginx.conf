events {
    worker_connections 1024;
}

http {
    upstream nodeapp {
        server node:3000;
    }

    upstream ocpuapp {
        server ocpu:8004;  
    }

    include       /etc/nginx/mime.types; # Include the default MIME types
    default_type  application/octet-stream;

    # Define cache settings
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=node_cache:500m max_size=1500m inactive=1w use_temp_path=off;

    server {
        listen 11765;

        # Redirect requests to the node service
        location / {
            proxy_pass http://nodeapp;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Enable caching for dynamic content served by the Node app
            proxy_cache node_cache;

            # Cache GET requests
            proxy_cache_methods GET;

            proxy_cache_key "$scheme$request_method$host$request_uri";

            # Valid responses caching
            proxy_cache_valid 200 201 1w;
            proxy_cache_valid 400 404 1m;  

            # Add header to check cache status
            add_header X-ocpu-cache $upstream_cache_status;

        }

        location /ocpu {
            proxy_pass http://ocpuapp/ocpu;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Handle redirects from OpenCPU
            proxy_redirect ocpu:8004/ocpu/ http://$host:11765/ocpu/;
            proxy_redirect ocpu:8004/ http://$host:11765/;

            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*';  # Allow your Nginx origin
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';      # Allow specific methods
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';  # Allow specific headers

            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
                add_header 'Content-Length' 0;
                return 204;
            }

            # Bypass cache condition
            set $bypass_cache 0;  # Default: do not bypass cache

            # Check for the no_cache query parameter
            if ($arg_no_cache = "1") {
                set $bypass_cache 1;  # Set bypass flag if the parameter is present
            }

            # Use the bypass flag for caching
            proxy_cache_bypass $bypass_cache;

            # Enable caching for OpenCPU dynamic content
            proxy_cache node_cache;

            # Cache POST requests
            proxy_cache_methods POST;

            proxy_cache_key "$scheme$request_method$host$request_uri$request_body$content_length";

            # Valid responses caching
            proxy_cache_valid 200 201 1w;
            proxy_cache_valid 400 404 1m;  

            # Add header to check cache status
            add_header X-ocpu-cache $upstream_cache_status;
        }

        location /rstudio {
            proxy_pass http://ocpuapp/rstudio;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Handle redirects from OpenCPU
            proxy_redirect ocpu:8004/rstudio/ http://$host:11765/rstudio/;
            proxy_redirect ocpu:8004/ http://$host:11765/;

            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*';  # Allow your Nginx origin
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';      # Allow specific methods
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';  # Allow specific headers

            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # Serve static files
        location /static {
            alias /usr/share/nginx/html;
            try_files $uri $uri/ =404;  # Try to serve file, else return 404
        }

        # Caching example
        location ~* \.(jpg|jpeg|png|gif|ico|csv|json)$ {
          root /usr/share/nginx/html;
          expires 30d;
          add_header Cache-Control "public, no-transform";
        }

    }

    client_max_body_size 200M;  # Adjust to your required size limit (e.g., 20MB)
    error_log /var/log/nginx/error.log debug;
}
